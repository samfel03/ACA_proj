// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module loop_uhat_sparse_loop_uhat_sparse_Pipeline_VITIS_LOOP_96_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outStream_TREADY,
        output_data_address0,
        output_data_ce0,
        output_data_q0,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   outStream_TREADY;
output  [14:0] output_data_address0;
output   output_data_ce0;
input  [63:0] output_data_q0;
output  [63:0] outStream_TDATA;
output   outStream_TVALID;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [0:0] outStream_TLAST;

reg ap_idle;
reg output_data_ce0;
reg outStream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln96_fu_132_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    outStream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_396;
reg   [0:0] tmp_reg_396_pp0_iter2_reg;
wire   [51:0] trunc_ln140_1_fu_184_p1;
reg   [51:0] trunc_ln140_1_reg_401;
wire   [0:0] icmp_ln140_fu_188_p2;
reg   [0:0] icmp_ln140_reg_406;
wire  signed [11:0] sub_ln140_fu_194_p2;
reg  signed [11:0] sub_ln140_reg_412;
wire   [0:0] icmp_ln140_1_fu_200_p2;
reg   [0:0] icmp_ln140_1_reg_419;
wire  signed [11:0] sub_ln140_1_fu_206_p2;
reg  signed [11:0] sub_ln140_1_reg_425;
reg   [5:0] tmp_29_reg_430;
wire   [63:0] select_ln140_2_fu_360_p3;
reg   [63:0] select_ln140_2_reg_435;
wire   [63:0] zext_ln96_fu_144_p1;
reg   [14:0] i_fu_88;
wire   [14:0] add_ln96_fu_138_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] bitcast_ln724_fu_154_p1;
wire   [10:0] tmp2_fu_170_p4;
wire   [62:0] trunc_ln140_fu_158_p1;
wire   [11:0] zext_ln140_fu_180_p1;
wire   [52:0] zext_ln140_2_cast2_fu_222_p3;
wire  signed [31:0] sext_ln140_fu_252_p1;
wire   [53:0] zext_ln140_1_fu_229_p1;
wire   [53:0] zext_ln140_3_fu_255_p1;
wire   [53:0] lshr_ln140_fu_259_p2;
wire   [24:0] trunc_ln140_2_fu_265_p1;
wire  signed [31:0] sext_ln140_2_fu_273_p1;
wire   [63:0] zext_ln140_2_fu_233_p1;
wire   [63:0] zext_ln140_4_fu_276_p1;
wire   [0:0] xor_ln140_fu_286_p2;
wire   [0:0] and_ln140_fu_291_p2;
wire   [52:0] select_ln140_fu_296_p3;
wire   [0:0] or_ln140_fu_308_p2;
wire   [0:0] icmp_ln140_3_fu_242_p2;
wire   [0:0] xor_ln140_1_fu_312_p2;
wire   [0:0] and_ln140_1_fu_318_p2;
wire   [0:0] icmp_ln140_2_fu_237_p2;
wire   [0:0] and_ln140_2_fu_324_p2;
wire  signed [53:0] sext_ln140_1_fu_269_p1;
wire   [53:0] zext_ln140_5_fu_304_p1;
wire   [53:0] select_ln140_1_fu_330_p3;
wire   [0:0] or_ln140_1_fu_342_p2;
wire   [0:0] icmp_ln140_4_fu_247_p2;
wire   [0:0] xor_ln140_2_fu_348_p2;
wire   [0:0] and_ln140_3_fu_354_p2;
wire   [63:0] shl_ln140_fu_280_p2;
wire  signed [63:0] sext_ln140_3_fu_338_p1;
wire   [63:0] sub_ln140_2_fu_368_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 i_fu_88 = 15'd0;
#0 ap_done_reg = 1'b0;
end

loop_uhat_sparse_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln96_fu_132_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_88 <= add_ln96_fu_138_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln140_1_reg_419 <= icmp_ln140_1_fu_200_p2;
        icmp_ln140_reg_406 <= icmp_ln140_fu_188_p2;
        sub_ln140_1_reg_425 <= sub_ln140_1_fu_206_p2;
        sub_ln140_reg_412 <= sub_ln140_fu_194_p2;
        tmp_29_reg_430 <= {{sub_ln140_1_fu_206_p2[11:6]}};
        tmp_reg_396 <= bitcast_ln724_fu_154_p1[32'd63];
        trunc_ln140_1_reg_401 <= trunc_ln140_1_fu_184_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        select_ln140_2_reg_435 <= select_ln140_2_fu_360_p3;
        tmp_reg_396_pp0_iter2_reg <= tmp_reg_396;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 15'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_TDATA_blk_n = outStream_TREADY;
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_TVALID = 1'b1;
    end else begin
        outStream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_data_ce0 = 1'b1;
    end else begin
        output_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln96_fu_138_p2 = (ap_sig_allocacmp_i_1 + 15'd1);

assign and_ln140_1_fu_318_p2 = (xor_ln140_1_fu_312_p2 & icmp_ln140_3_fu_242_p2);

assign and_ln140_2_fu_324_p2 = (icmp_ln140_2_fu_237_p2 & and_ln140_1_fu_318_p2);

assign and_ln140_3_fu_354_p2 = (xor_ln140_2_fu_348_p2 & icmp_ln140_4_fu_247_p2);

assign and_ln140_fu_291_p2 = (xor_ln140_fu_286_p2 & icmp_ln140_1_reg_419);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & ((outStream_TREADY == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & ((outStream_TREADY == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (outStream_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln724_fu_154_p1 = output_data_q0;

assign icmp_ln140_1_fu_200_p2 = ((tmp2_fu_170_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln140_2_fu_237_p2 = (($signed(sub_ln140_reg_412) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln140_3_fu_242_p2 = (($signed(sub_ln140_reg_412) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln140_4_fu_247_p2 = (($signed(tmp_29_reg_430) < $signed(6'd1)) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_188_p2 = ((trunc_ln140_fu_158_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_132_p2 = ((ap_sig_allocacmp_i_1 == 15'd17048) ? 1'b1 : 1'b0);

assign lshr_ln140_fu_259_p2 = zext_ln140_1_fu_229_p1 >> zext_ln140_3_fu_255_p1;

assign or_ln140_1_fu_342_p2 = (or_ln140_fu_308_p2 | icmp_ln140_2_fu_237_p2);

assign or_ln140_fu_308_p2 = (icmp_ln140_reg_406 | icmp_ln140_1_reg_419);

assign outStream_TDATA = ((tmp_reg_396_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln140_2_fu_368_p2 : select_ln140_2_reg_435);

assign outStream_TKEEP = 'bx;

assign outStream_TLAST = 'bx;

assign outStream_TSTRB = 'bx;

assign output_data_address0 = zext_ln96_fu_144_p1;

assign select_ln140_1_fu_330_p3 = ((and_ln140_2_fu_324_p2[0:0] == 1'b1) ? sext_ln140_1_fu_269_p1 : zext_ln140_5_fu_304_p1);

assign select_ln140_2_fu_360_p3 = ((and_ln140_3_fu_354_p2[0:0] == 1'b1) ? shl_ln140_fu_280_p2 : sext_ln140_3_fu_338_p1);

assign select_ln140_fu_296_p3 = ((and_ln140_fu_291_p2[0:0] == 1'b1) ? zext_ln140_2_cast2_fu_222_p3 : 53'd0);

assign sext_ln140_1_fu_269_p1 = $signed(trunc_ln140_2_fu_265_p1);

assign sext_ln140_2_fu_273_p1 = sub_ln140_1_reg_425;

assign sext_ln140_3_fu_338_p1 = $signed(select_ln140_1_fu_330_p3);

assign sext_ln140_fu_252_p1 = sub_ln140_reg_412;

assign shl_ln140_fu_280_p2 = zext_ln140_2_fu_233_p1 << zext_ln140_4_fu_276_p1;

assign sub_ln140_1_fu_206_p2 = ($signed(12'd0) - $signed(sub_ln140_fu_194_p2));

assign sub_ln140_2_fu_368_p2 = (64'd0 - select_ln140_2_reg_435);

assign sub_ln140_fu_194_p2 = (12'd1075 - zext_ln140_fu_180_p1);

assign tmp2_fu_170_p4 = {{bitcast_ln724_fu_154_p1[62:52]}};

assign trunc_ln140_1_fu_184_p1 = bitcast_ln724_fu_154_p1[51:0];

assign trunc_ln140_2_fu_265_p1 = lshr_ln140_fu_259_p2[24:0];

assign trunc_ln140_fu_158_p1 = bitcast_ln724_fu_154_p1[62:0];

assign xor_ln140_1_fu_312_p2 = (or_ln140_fu_308_p2 ^ 1'd1);

assign xor_ln140_2_fu_348_p2 = (or_ln140_1_fu_342_p2 ^ 1'd1);

assign xor_ln140_fu_286_p2 = (icmp_ln140_reg_406 ^ 1'd1);

assign zext_ln140_1_fu_229_p1 = zext_ln140_2_cast2_fu_222_p3;

assign zext_ln140_2_cast2_fu_222_p3 = {{1'd1}, {trunc_ln140_1_reg_401}};

assign zext_ln140_2_fu_233_p1 = zext_ln140_2_cast2_fu_222_p3;

assign zext_ln140_3_fu_255_p1 = $unsigned(sext_ln140_fu_252_p1);

assign zext_ln140_4_fu_276_p1 = $unsigned(sext_ln140_2_fu_273_p1);

assign zext_ln140_5_fu_304_p1 = select_ln140_fu_296_p3;

assign zext_ln140_fu_180_p1 = tmp2_fu_170_p4;

assign zext_ln96_fu_144_p1 = ap_sig_allocacmp_i_1;

endmodule //loop_uhat_sparse_loop_uhat_sparse_Pipeline_VITIS_LOOP_96_6
