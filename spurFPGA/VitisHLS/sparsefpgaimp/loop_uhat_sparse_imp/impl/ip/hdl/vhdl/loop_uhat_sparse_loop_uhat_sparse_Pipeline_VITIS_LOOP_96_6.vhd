-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_uhat_sparse_loop_uhat_sparse_Pipeline_VITIS_LOOP_96_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    output_data_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_data_ce0 : OUT STD_LOGIC;
    output_data_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of loop_uhat_sparse_loop_uhat_sparse_Pipeline_VITIS_LOOP_96_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4298 : STD_LOGIC_VECTOR (14 downto 0) := "100001010011000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv53_0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln96_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_396_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_1_fu_184_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln140_1_reg_401 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln140_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln140_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln140_fu_194_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln140_reg_412 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln140_1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln140_1_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln140_1_fu_206_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln140_1_reg_425 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_reg_430 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln140_2_fu_360_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln140_2_reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_88 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln96_fu_138_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln724_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_170_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln140_fu_158_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln140_fu_180_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln140_2_cast2_fu_222_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal sext_ln140_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln140_1_fu_229_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln140_3_fu_255_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln140_fu_259_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln140_2_fu_265_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln140_2_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln140_2_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_4_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln140_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln140_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln140_fu_296_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal or_ln140_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln140_3_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln140_1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln140_1_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln140_2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln140_2_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln140_1_fu_269_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln140_5_fu_304_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln140_1_fu_330_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal or_ln140_1_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln140_4_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln140_2_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln140_3_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln140_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_3_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln140_2_fu_368_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component loop_uhat_sparse_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component loop_uhat_sparse_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln96_fu_132_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_88 <= add_ln96_fu_138_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln140_1_reg_419 <= icmp_ln140_1_fu_200_p2;
                icmp_ln140_reg_406 <= icmp_ln140_fu_188_p2;
                sub_ln140_1_reg_425 <= sub_ln140_1_fu_206_p2;
                sub_ln140_reg_412 <= sub_ln140_fu_194_p2;
                tmp_29_reg_430 <= sub_ln140_1_fu_206_p2(11 downto 6);
                tmp_reg_396 <= bitcast_ln724_fu_154_p1(63 downto 63);
                trunc_ln140_1_reg_401 <= trunc_ln140_1_fu_184_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                select_ln140_2_reg_435 <= select_ln140_2_fu_360_p3;
                tmp_reg_396_pp0_iter2_reg <= tmp_reg_396;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln96_fu_138_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv15_1));
    and_ln140_1_fu_318_p2 <= (xor_ln140_1_fu_312_p2 and icmp_ln140_3_fu_242_p2);
    and_ln140_2_fu_324_p2 <= (icmp_ln140_2_fu_237_p2 and and_ln140_1_fu_318_p2);
    and_ln140_3_fu_354_p2 <= (xor_ln140_2_fu_348_p2 and icmp_ln140_4_fu_247_p2);
    and_ln140_fu_291_p2 <= (xor_ln140_fu_286_p2 and icmp_ln140_1_reg_419);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, outStream_TREADY, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((outStream_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, outStream_TREADY, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((outStream_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(outStream_TREADY)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (outStream_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln96_fu_132_p2)
    begin
        if (((icmp_ln96_fu_132_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_88;
        end if; 
    end process;

    bitcast_ln724_fu_154_p1 <= output_data_q0;
    icmp_ln140_1_fu_200_p2 <= "1" when (tmp2_fu_170_p4 = ap_const_lv11_433) else "0";
    icmp_ln140_2_fu_237_p2 <= "1" when (signed(sub_ln140_reg_412) > signed(ap_const_lv12_0)) else "0";
    icmp_ln140_3_fu_242_p2 <= "1" when (signed(sub_ln140_reg_412) < signed(ap_const_lv12_36)) else "0";
    icmp_ln140_4_fu_247_p2 <= "1" when (signed(tmp_29_reg_430) < signed(ap_const_lv6_1)) else "0";
    icmp_ln140_fu_188_p2 <= "1" when (trunc_ln140_fu_158_p1 = ap_const_lv63_0) else "0";
    icmp_ln96_fu_132_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv15_4298) else "0";
    lshr_ln140_fu_259_p2 <= std_logic_vector(shift_right(unsigned(zext_ln140_1_fu_229_p1),to_integer(unsigned('0' & zext_ln140_3_fu_255_p1(31-1 downto 0)))));
    or_ln140_1_fu_342_p2 <= (or_ln140_fu_308_p2 or icmp_ln140_2_fu_237_p2);
    or_ln140_fu_308_p2 <= (icmp_ln140_reg_406 or icmp_ln140_1_reg_419);
    outStream_TDATA <= 
        sub_ln140_2_fu_368_p2 when (tmp_reg_396_pp0_iter2_reg(0) = '1') else 
        select_ln140_2_reg_435;

    outStream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, outStream_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_TDATA_blk_n <= outStream_TREADY;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TKEEP <= "XXXXXXXX";
    outStream_TLAST <= "X";
    outStream_TSTRB <= "XXXXXXXX";

    outStream_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_TVALID <= ap_const_logic_1;
        else 
            outStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_data_address0 <= zext_ln96_fu_144_p1(15 - 1 downto 0);

    output_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_data_ce0 <= ap_const_logic_1;
        else 
            output_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln140_1_fu_330_p3 <= 
        sext_ln140_1_fu_269_p1 when (and_ln140_2_fu_324_p2(0) = '1') else 
        zext_ln140_5_fu_304_p1;
    select_ln140_2_fu_360_p3 <= 
        shl_ln140_fu_280_p2 when (and_ln140_3_fu_354_p2(0) = '1') else 
        sext_ln140_3_fu_338_p1;
    select_ln140_fu_296_p3 <= 
        zext_ln140_2_cast2_fu_222_p3 when (and_ln140_fu_291_p2(0) = '1') else 
        ap_const_lv53_0;
        sext_ln140_1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln140_2_fu_265_p1),54));

        sext_ln140_2_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln140_1_reg_425),32));

        sext_ln140_3_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln140_1_fu_330_p3),64));

        sext_ln140_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln140_reg_412),32));

    shl_ln140_fu_280_p2 <= std_logic_vector(shift_left(unsigned(zext_ln140_2_fu_233_p1),to_integer(unsigned('0' & zext_ln140_4_fu_276_p1(31-1 downto 0)))));
    sub_ln140_1_fu_206_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sub_ln140_fu_194_p2));
    sub_ln140_2_fu_368_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(select_ln140_2_reg_435));
    sub_ln140_fu_194_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln140_fu_180_p1));
    tmp2_fu_170_p4 <= bitcast_ln724_fu_154_p1(62 downto 52);
    trunc_ln140_1_fu_184_p1 <= bitcast_ln724_fu_154_p1(52 - 1 downto 0);
    trunc_ln140_2_fu_265_p1 <= lshr_ln140_fu_259_p2(25 - 1 downto 0);
    trunc_ln140_fu_158_p1 <= bitcast_ln724_fu_154_p1(63 - 1 downto 0);
    xor_ln140_1_fu_312_p2 <= (or_ln140_fu_308_p2 xor ap_const_lv1_1);
    xor_ln140_2_fu_348_p2 <= (or_ln140_1_fu_342_p2 xor ap_const_lv1_1);
    xor_ln140_fu_286_p2 <= (icmp_ln140_reg_406 xor ap_const_lv1_1);
    zext_ln140_1_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln140_2_cast2_fu_222_p3),54));
    zext_ln140_2_cast2_fu_222_p3 <= (ap_const_lv1_1 & trunc_ln140_1_reg_401);
    zext_ln140_2_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln140_2_cast2_fu_222_p3),64));
    zext_ln140_3_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln140_fu_252_p1),54));
    zext_ln140_4_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln140_2_fu_273_p1),64));
    zext_ln140_5_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln140_fu_296_p3),54));
    zext_ln140_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_170_p4),12));
    zext_ln96_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
end behav;
