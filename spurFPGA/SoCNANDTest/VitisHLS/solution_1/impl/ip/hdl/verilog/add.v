// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="add_add,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007s-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.552000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=144,HLS_SYN_LUT=271,HLS_VERSION=2023_2}" *)

module add (
        s_axi_CRTLS_AWVALID,
        s_axi_CRTLS_AWREADY,
        s_axi_CRTLS_AWADDR,
        s_axi_CRTLS_WVALID,
        s_axi_CRTLS_WREADY,
        s_axi_CRTLS_WDATA,
        s_axi_CRTLS_WSTRB,
        s_axi_CRTLS_ARVALID,
        s_axi_CRTLS_ARREADY,
        s_axi_CRTLS_ARADDR,
        s_axi_CRTLS_RVALID,
        s_axi_CRTLS_RREADY,
        s_axi_CRTLS_RDATA,
        s_axi_CRTLS_RRESP,
        s_axi_CRTLS_BVALID,
        s_axi_CRTLS_BREADY,
        s_axi_CRTLS_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt
);

parameter    C_S_AXI_CRTLS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTLS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTLS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_CRTLS_AWVALID;
output   s_axi_CRTLS_AWREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1:0] s_axi_CRTLS_AWADDR;
input   s_axi_CRTLS_WVALID;
output   s_axi_CRTLS_WREADY;
input  [C_S_AXI_CRTLS_DATA_WIDTH - 1:0] s_axi_CRTLS_WDATA;
input  [C_S_AXI_CRTLS_WSTRB_WIDTH - 1:0] s_axi_CRTLS_WSTRB;
input   s_axi_CRTLS_ARVALID;
output   s_axi_CRTLS_ARREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1:0] s_axi_CRTLS_ARADDR;
output   s_axi_CRTLS_RVALID;
input   s_axi_CRTLS_RREADY;
output  [C_S_AXI_CRTLS_DATA_WIDTH - 1:0] s_axi_CRTLS_RDATA;
output  [1:0] s_axi_CRTLS_RRESP;
output   s_axi_CRTLS_BVALID;
input   s_axi_CRTLS_BREADY;
output  [1:0] s_axi_CRTLS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;

wire    ap_start;
wire    ap_done;
wire    ap_idle;
wire    ap_ready;
wire   [31:0] a;
wire   [31:0] b;
wire   [31:0] ap_return;
 reg    ap_rst_n_inv;
wire    ap_ce_reg;

add_CRTLS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTLS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTLS_DATA_WIDTH ))
CRTLS_s_axi_U(
    .AWVALID(s_axi_CRTLS_AWVALID),
    .AWREADY(s_axi_CRTLS_AWREADY),
    .AWADDR(s_axi_CRTLS_AWADDR),
    .WVALID(s_axi_CRTLS_WVALID),
    .WREADY(s_axi_CRTLS_WREADY),
    .WDATA(s_axi_CRTLS_WDATA),
    .WSTRB(s_axi_CRTLS_WSTRB),
    .ARVALID(s_axi_CRTLS_ARVALID),
    .ARREADY(s_axi_CRTLS_ARREADY),
    .ARADDR(s_axi_CRTLS_ARADDR),
    .RVALID(s_axi_CRTLS_RVALID),
    .RREADY(s_axi_CRTLS_RREADY),
    .RDATA(s_axi_CRTLS_RDATA),
    .RRESP(s_axi_CRTLS_RRESP),
    .BVALID(s_axi_CRTLS_BVALID),
    .BREADY(s_axi_CRTLS_BREADY),
    .BRESP(s_axi_CRTLS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .a(a),
    .b(b)
);

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign ap_return = (b + a);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

endmodule //add
