-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_uhat_sparse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rowStart : IN STD_LOGIC_VECTOR (31 downto 0);
    colIndex : IN STD_LOGIC_VECTOR (31 downto 0);
    value_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ELEMENTS : IN STD_LOGIC_VECTOR (31 downto 0);
    tol : IN STD_LOGIC_VECTOR (63 downto 0);
    L : IN STD_LOGIC_VECTOR (63 downto 0);
    L_exp : IN STD_LOGIC_VECTOR (63 downto 0);
    uhat_i_i : IN STD_LOGIC_VECTOR (63 downto 0);
    uhat_i_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    uhat_i_o_ap_vld : OUT STD_LOGIC;
    R : IN STD_LOGIC_VECTOR (63 downto 0);
    R_exp : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of loop_uhat_sparse is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_uhat_sparse_loop_uhat_sparse,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s50-csga324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.239984,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=158,HLS_SYN_DSP=0,HLS_SYN_FF=17694,HLS_SYN_LUT=16036,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (132 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (132 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (132 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (132 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (132 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (132 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (132 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (132 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (132 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (132 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (132 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_4298 : STD_LOGIC_VECTOR (14 downto 0) := "100001010011000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_4297 : STD_LOGIC_VECTOR (14 downto 0) := "100001010010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (132 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal bitcast_ln19_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln19_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln31_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln31_reg_529 : STD_LOGIC_VECTOR (63 downto 0);
    signal integral_addr_reg_534 : STD_LOGIC_VECTOR (14 downto 0);
    signal bitcast_ln33_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln33_reg_539 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln14_1_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_1_reg_544 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln14_1_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal uhat_i_read_reg_565 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal bitcast_ln19_1_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln19_1_reg_570 : STD_LOGIC_VECTOR (63 downto 0);
    signal integral_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal integral_load_reg_575 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln22_fu_445_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln22_reg_583 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal e_max_1_fu_457_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_max_1_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_double_s_fu_278_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_593 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal bitcast_ln37_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln37_reg_598 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln34_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal deviation_reg_608 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal integral_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_ce0 : STD_LOGIC;
    signal integral_we0 : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_done : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_idle : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_ready : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_ce0 : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_we0 : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_ce : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_din2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_start : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_done : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_idle : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_ready : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_rhs_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_rhs_out_ap_vld : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_ce : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_ce : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_278_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_278_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_278_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_278_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_278_base_r : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_278_exp : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_214 : STD_LOGIC_VECTOR (14 downto 0);
    signal error_2_reg_225 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start_reg : STD_LOGIC := '0';
    signal and_ln14_1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln22_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_pow_generic_double_s_fu_278_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (132 downto 0);
    signal ap_NS_fsm_state16 : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln31_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal error_1_fu_114 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_308_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal bitcast_ln14_1_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_348_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln14_fu_358_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln14_3_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_2_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln14_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_393_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln14_1_fu_403_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln14_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_308_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_308_ce : STD_LOGIC;
    signal grp_fu_315_ce : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component loop_uhat_sparse_loop_uhat_sparse_Pipeline_loop_uhat_integral IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bitcast_ln19_1 : IN STD_LOGIC_VECTOR (63 downto 0);
        R_exp : IN STD_LOGIC_VECTOR (63 downto 0);
        bitcast_ln19 : IN STD_LOGIC_VECTOR (63 downto 0);
        integral_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        integral_ce0 : OUT STD_LOGIC;
        integral_we0 : OUT STD_LOGIC;
        integral_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_315_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_315_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_315_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_315_p_ce : OUT STD_LOGIC;
        grp_pow_generic_double_s_fu_278_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_pow_generic_double_s_fu_278_p_din2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_pow_generic_double_s_fu_278_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_pow_generic_double_s_fu_278_p_start : OUT STD_LOGIC;
        grp_pow_generic_double_s_fu_278_p_ready : IN STD_LOGIC;
        grp_pow_generic_double_s_fu_278_p_done : IN STD_LOGIC;
        grp_pow_generic_double_s_fu_278_p_idle : IN STD_LOGIC );
    end component;


    component loop_uhat_sparse_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln30 : IN STD_LOGIC_VECTOR (31 downto 0);
        wide_trip_count : IN STD_LOGIC_VECTOR (31 downto 0);
        bitcast_ln31 : IN STD_LOGIC_VECTOR (63 downto 0);
        integral_load : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        rhs_out_ap_vld : OUT STD_LOGIC;
        grp_fu_308_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_308_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_308_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_308_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_308_p_ce : OUT STD_LOGIC;
        grp_fu_315_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_315_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_315_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_315_p_ce : OUT STD_LOGIC );
    end component;


    component loop_uhat_sparse_pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (63 downto 0);
        exp : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component loop_uhat_sparse_dadddsub_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component loop_uhat_sparse_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component loop_uhat_sparse_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component loop_uhat_sparse_integral_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    integral_U : component loop_uhat_sparse_integral_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 17048,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => integral_address0,
        ce0 => integral_ce0,
        we0 => integral_we0,
        d0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_d0,
        q0 => integral_q0);

    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237 : component loop_uhat_sparse_loop_uhat_sparse_Pipeline_loop_uhat_integral
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start,
        ap_done => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_done,
        ap_idle => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_idle,
        ap_ready => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_ready,
        bitcast_ln19_1 => bitcast_ln19_1_reg_570,
        R_exp => R_exp,
        bitcast_ln19 => bitcast_ln19_reg_518,
        integral_address0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_address0,
        integral_ce0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_ce0,
        integral_we0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_we0,
        integral_d0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_d0,
        grp_fu_315_p_din0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_din0,
        grp_fu_315_p_din1 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_din1,
        grp_fu_315_p_dout0 => grp_fu_315_p2,
        grp_fu_315_p_ce => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_ce,
        grp_pow_generic_double_s_fu_278_p_din1 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_din1,
        grp_pow_generic_double_s_fu_278_p_din2 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_din2,
        grp_pow_generic_double_s_fu_278_p_dout0 => grp_pow_generic_double_s_fu_278_ap_return,
        grp_pow_generic_double_s_fu_278_p_start => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_start,
        grp_pow_generic_double_s_fu_278_p_ready => grp_pow_generic_double_s_fu_278_ap_ready,
        grp_pow_generic_double_s_fu_278_p_done => grp_pow_generic_double_s_fu_278_ap_done,
        grp_pow_generic_double_s_fu_278_p_idle => grp_pow_generic_double_s_fu_278_ap_idle);

    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269 : component loop_uhat_sparse_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start,
        ap_done => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_done,
        ap_idle => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_idle,
        ap_ready => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_ready,
        sext_ln30 => rowStart,
        wide_trip_count => e_max_1_reg_588,
        bitcast_ln31 => bitcast_ln31_reg_529,
        integral_load => integral_load_reg_575,
        rhs_out => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_rhs_out,
        rhs_out_ap_vld => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_rhs_out_ap_vld,
        grp_fu_308_p_din0 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_din0,
        grp_fu_308_p_din1 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_din1,
        grp_fu_308_p_opcode => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_opcode,
        grp_fu_308_p_dout0 => grp_fu_308_p2,
        grp_fu_308_p_ce => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_ce,
        grp_fu_315_p_din0 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_din0,
        grp_fu_315_p_din1 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_din1,
        grp_fu_315_p_dout0 => grp_fu_315_p2,
        grp_fu_315_p_ce => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_ce);

    grp_pow_generic_double_s_fu_278 : component loop_uhat_sparse_pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_278_ap_start,
        ap_done => grp_pow_generic_double_s_fu_278_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_278_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_278_ap_ready,
        base_r => grp_pow_generic_double_s_fu_278_base_r,
        exp => grp_pow_generic_double_s_fu_278_exp,
        ap_return => grp_pow_generic_double_s_fu_278_ap_return);

    dadddsub_64ns_64ns_64_8_full_dsp_1_U59 : component loop_uhat_sparse_dadddsub_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_308_p0,
        din1 => grp_fu_308_p1,
        opcode => grp_fu_308_opcode,
        ce => grp_fu_308_ce,
        dout => grp_fu_308_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U60 : component loop_uhat_sparse_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_315_p0,
        din1 => grp_fu_315_p1,
        ce => grp_fu_315_ce,
        dout => grp_fu_315_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U61 : component loop_uhat_sparse_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => error_1_fu_114,
        din1 => tol,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_319_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln22_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_ready = ap_const_logic_1)) then 
                    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = and_ln14_1_fu_428_p2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_ready = ap_const_logic_1)) then 
                    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_278_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_278_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state16) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_pow_generic_double_s_fu_278_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_278_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_278_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                empty_reg_204 <= uhat_i_read_reg_565;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                empty_reg_204 <= bitcast_ln37_reg_598;
            end if; 
        end if;
    end process;

    error_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                error_1_fu_114 <= grp_fu_308_p2;
            elsif (((icmp_ln22_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                error_1_fu_114 <= error_2_reg_225;
            end if; 
        end if;
    end process;

    error_2_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                error_2_reg_225 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                error_2_reg_225 <= grp_fu_308_p2;
            end if; 
        end if;
    end process;

    i_1_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_1_reg_214 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                i_1_reg_214 <= add_ln22_reg_583;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln22_reg_583 <= add_ln22_fu_445_p2;
                e_max_1_reg_588 <= e_max_1_fu_457_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                bitcast_ln19_1_reg_570 <= bitcast_ln19_1_fu_434_p1;
                uhat_i_read_reg_565 <= uhat_i_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                bitcast_ln19_reg_518 <= bitcast_ln19_fu_328_p1;
                bitcast_ln31_reg_529 <= bitcast_ln31_fu_332_p1;
                bitcast_ln33_reg_539 <= bitcast_ln33_fu_341_p1;
                integral_addr_reg_534 <= zext_ln31_fu_336_p1(15 - 1 downto 0);
                or_ln14_1_reg_544 <= or_ln14_1_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state110)) then
                bitcast_ln37_reg_598 <= bitcast_ln37_fu_473_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                deviation_reg_608 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln14_1_reg_557 <= icmp_ln14_1_fu_413_p2;
                icmp_ln14_reg_552 <= icmp_ln14_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                integral_load_reg_575 <= integral_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state110))) then
                reg_323 <= grp_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                tmp_s_reg_593 <= grp_pow_generic_double_s_fu_278_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state14, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_done, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_done, and_ln14_1_fu_428_p2, ap_CS_fsm_state11, icmp_ln22_fu_439_p2, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_lv1_0 = and_ln14_1_fu_428_p2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln22_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_fu_445_p2 <= std_logic_vector(unsigned(i_1_reg_214) + unsigned(ap_const_lv15_1));
    and_ln14_1_fu_428_p2 <= (grp_fu_319_p2 and and_ln14_fu_423_p2);
    and_ln14_fu_423_p2 <= (or_ln14_fu_419_p2 and or_ln14_1_reg_544);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state16 <= ap_NS_fsm(15);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_done)
    begin
        if ((grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_done)
    begin
        if ((grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state10, and_ln14_1_fu_428_p2)
    begin
        if (((ap_const_lv1_0 = and_ln14_1_fu_428_p2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, and_ln14_1_fu_428_p2)
    begin
        if (((ap_const_lv1_0 = and_ln14_1_fu_428_p2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln14_1_fu_345_p1 <= tol;
    bitcast_ln14_fu_389_p1 <= error_1_fu_114;
    bitcast_ln19_1_fu_434_p1 <= uhat_i_i;
    bitcast_ln19_fu_328_p1 <= R;
    bitcast_ln31_fu_332_p1 <= value_r;
    bitcast_ln33_fu_341_p1 <= L;
    bitcast_ln34_fu_478_p1 <= empty_reg_204;
    bitcast_ln37_fu_473_p1 <= grp_fu_315_p2;
    e_max_1_fu_457_p3 <= 
        rowStart when (icmp_ln25_fu_451_p2(0) = '1') else 
        ELEMENTS;

    grp_fu_308_ce_assign_proc : process(grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_ce, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_308_ce <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_ce;
        else 
            grp_fu_308_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_308_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state111, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_opcode, ap_CS_fsm_state15, ap_CS_fsm_state126)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_308_opcode <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_opcode),2));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_308_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state126) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            grp_fu_308_opcode <= ap_const_lv2_0;
        else 
            grp_fu_308_opcode <= "XX";
        end if; 
    end process;


    grp_fu_308_p0_assign_proc : process(ap_CS_fsm_state1, tol, bitcast_ln34_fu_478_p1, ap_CS_fsm_state111, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_din0, error_2_reg_225, ap_CS_fsm_state15, ap_CS_fsm_state126)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_308_p0 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            grp_fu_308_p0 <= error_2_reg_225;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_308_p0 <= bitcast_ln34_fu_478_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_308_p0 <= tol;
        else 
            grp_fu_308_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_p1_assign_proc : process(ap_CS_fsm_state1, reg_323, ap_CS_fsm_state111, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_din1, ap_CS_fsm_state15, ap_CS_fsm_state126)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_308_p1 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_308_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            grp_fu_308_p1 <= reg_323;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_308_p1 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_308_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_315_ce_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_ce, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_ce, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_315_ce <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_315_ce <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_ce;
        else 
            grp_fu_315_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_315_p0_assign_proc : process(bitcast_ln33_reg_539, deviation_reg_608, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_din0, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_din0, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state104, ap_CS_fsm_state119)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_315_p0 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_315_p0 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            grp_fu_315_p0 <= deviation_reg_608;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_315_p0 <= bitcast_ln33_reg_539;
        else 
            grp_fu_315_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_315_p1_assign_proc : process(tmp_s_reg_593, deviation_reg_608, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_din1, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_din1, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state104, ap_CS_fsm_state119)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_315_p1 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_grp_fu_315_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_315_p1 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_fu_315_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            grp_fu_315_p1 <= deviation_reg_608;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_315_p1 <= tmp_s_reg_593;
        else 
            grp_fu_315_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_ap_start_reg;
    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_ap_start_reg;

    grp_pow_generic_double_s_fu_278_ap_start_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_start, ap_CS_fsm_state11, grp_pow_generic_double_s_fu_278_ap_start_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_pow_generic_double_s_fu_278_ap_start <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_start;
        else 
            grp_pow_generic_double_s_fu_278_ap_start <= grp_pow_generic_double_s_fu_278_ap_start_reg;
        end if; 
    end process;


    grp_pow_generic_double_s_fu_278_base_r_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_din1, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_rhs_out, ap_CS_fsm_state11, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_pow_generic_double_s_fu_278_base_r <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_pow_generic_double_s_fu_278_base_r <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_30_1_fu_269_rhs_out;
        else 
            grp_pow_generic_double_s_fu_278_base_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pow_generic_double_s_fu_278_exp_assign_proc : process(L_exp, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_din2, ap_CS_fsm_state11, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_pow_generic_double_s_fu_278_exp <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_grp_pow_generic_double_s_fu_278_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_pow_generic_double_s_fu_278_exp <= L_exp;
        else 
            grp_pow_generic_double_s_fu_278_exp <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln14_1_fu_413_p2 <= "1" when (trunc_ln14_1_fu_403_p1 = ap_const_lv52_0) else "0";
    icmp_ln14_2_fu_362_p2 <= "0" when (tmp_4_fu_348_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln14_3_fu_368_p2 <= "1" when (trunc_ln14_fu_358_p1 = ap_const_lv52_0) else "0";
    icmp_ln14_fu_407_p2 <= "0" when (tmp_3_fu_393_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln22_fu_439_p2 <= "1" when (i_1_reg_214 = ap_const_lv15_4298) else "0";
    icmp_ln25_fu_451_p2 <= "1" when (unsigned(i_1_reg_214) < unsigned(ap_const_lv15_4297)) else "0";

    integral_address0_assign_proc : process(integral_addr_reg_534, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_address0, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            integral_address0 <= integral_addr_reg_534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            integral_address0 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_address0;
        else 
            integral_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_ce0_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_ce0, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            integral_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            integral_ce0 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_ce0;
        else 
            integral_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    integral_we0_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            integral_we0 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_237_integral_we0;
        else 
            integral_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln14_1_fu_374_p2 <= (icmp_ln14_3_fu_368_p2 or icmp_ln14_2_fu_362_p2);
    or_ln14_fu_419_p2 <= (icmp_ln14_reg_552 or icmp_ln14_1_reg_557);
    tmp_3_fu_393_p4 <= bitcast_ln14_fu_389_p1(62 downto 52);
    tmp_4_fu_348_p4 <= bitcast_ln14_1_fu_345_p1(62 downto 52);
    trunc_ln14_1_fu_403_p1 <= bitcast_ln14_fu_389_p1(52 - 1 downto 0);
    trunc_ln14_fu_358_p1 <= bitcast_ln14_1_fu_345_p1(52 - 1 downto 0);

    uhat_i_o_assign_proc : process(uhat_i_i, ap_CS_fsm_state110, bitcast_ln37_fu_473_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            uhat_i_o <= bitcast_ln37_fu_473_p1;
        else 
            uhat_i_o <= uhat_i_i;
        end if; 
    end process;


    uhat_i_o_ap_vld_assign_proc : process(ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            uhat_i_o_ap_vld <= ap_const_logic_1;
        else 
            uhat_i_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln31_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colIndex),64));
end behav;
