-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_uhat_sparse is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of loop_uhat_sparse is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_uhat_sparse_loop_uhat_sparse,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007s-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=166,HLS_SYN_DSP=0,HLS_SYN_FF=21130,HLS_SYN_LUT=21168,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (151 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (151 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (151 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (151 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (151 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (151 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (151 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (151 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (151 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (151 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (151 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (151 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_4298 : STD_LOGIC_VECTOR (14 downto 0) := "100001010011000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_4297 : STD_LOGIC_VECTOR (14 downto 0) := "100001010010111";
    constant ap_const_lv17_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (151 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal rowStart : STD_LOGIC_VECTOR (63 downto 0);
    signal colIndex : STD_LOGIC_VECTOR (63 downto 0);
    signal value_r : STD_LOGIC_VECTOR (63 downto 0);
    signal ELEMENTS : STD_LOGIC_VECTOR (31 downto 0);
    signal tol : STD_LOGIC_VECTOR (63 downto 0);
    signal L : STD_LOGIC_VECTOR (63 downto 0);
    signal L_exp : STD_LOGIC_VECTOR (63 downto 0);
    signal uhat_i : STD_LOGIC_VECTOR (63 downto 0);
    signal R : STD_LOGIC_VECTOR (63 downto 0);
    signal R_exp : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal grp_fu_420_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_434 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal R_exp_read_reg_832 : STD_LOGIC_VECTOR (63 downto 0);
    signal uhat_i_read_reg_837 : STD_LOGIC_VECTOR (63 downto 0);
    signal L_exp_read_reg_842 : STD_LOGIC_VECTOR (63 downto 0);
    signal tol_read_reg_847 : STD_LOGIC_VECTOR (63 downto 0);
    signal ELEMENTS_read_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_r_read_reg_859 : STD_LOGIC_VECTOR (63 downto 0);
    signal colIndex_read_reg_864 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowStart_read_reg_869 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_881 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln40_1_reg_886 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln5_reg_891 : STD_LOGIC_VECTOR (60 downto 0);
    signal sext_ln36_fu_475_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln36_reg_896 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln36_1_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_1_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln36_1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_fu_573_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln44_reg_925 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln44_fu_579_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln44_reg_930 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln47_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_1_reg_939 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln48_fu_622_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln48_reg_944 : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_addr_2_read_reg_955 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_max_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal trunc_ln52_1_reg_965 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln52_fu_688_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln52_reg_970 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln55_fu_692_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln55_reg_975 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln7_reg_980 : STD_LOGIC_VECTOR (60 downto 0);
    signal gmem_addr_read_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal trunc_ln52_3_reg_1003 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal shl_ln52_3_fu_780_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln52_3_reg_1008 : STD_LOGIC_VECTOR (33 downto 0);
    signal gmem_addr_4_reg_1019 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_read_reg_1026 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_390_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1031 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln55_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal gmem_addr_4_read_reg_1041 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln56_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal integral_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_ce0 : STD_LOGIC;
    signal integral_we0 : STD_LOGIC;
    signal integral_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_done : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_idle : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_ready : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_ce0 : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_we0 : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_ce : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_din2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_ce : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_start : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_done : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_idle : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_ready : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_integral_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_integral_ce0 : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_rhs_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_rhs_out_ap_vld : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_ce : STD_LOGIC;
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_ce : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_390_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_390_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_390_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_390_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_390_ap_ce : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_390_base_r : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_390_exp : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal i_1_reg_308 : STD_LOGIC_VECTOR (14 downto 0);
    signal error_2_reg_320 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_max_1_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start_reg : STD_LOGIC := '0';
    signal grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start_reg : STD_LOGIC := '0';
    signal grp_pow_generic_double_s_fu_390_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (151 downto 0);
    signal ap_NS_fsm_state37 : STD_LOGIC;
    signal sext_ln48_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln56_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal error_1_fu_178 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal grp_fu_420_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_426_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln36_1_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_481_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln36_fu_491_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln36_3_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_2_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln36_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_526_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln36_1_fu_536_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln36_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_589_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln48_fu_597_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln48_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_1_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln48_1_fu_641_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln48_1_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln48_fu_652_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln5_fu_661_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln52_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln52_fu_673_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln7_fu_696_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln56_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln56_fu_708_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln52_1_fu_733_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_1_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln52_fu_744_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln52_2_fu_753_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln52_1_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln52_1_fu_764_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_420_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_420_ce : STD_LOGIC;
    signal grp_fu_426_ce : STD_LOGIC;
    signal and_ln36_1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ST_fsm_state151_blk : STD_LOGIC;
    signal ap_ST_fsm_state152_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component loop_uhat_sparse_loop_uhat_sparse_Pipeline_loop_uhat_integral IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln40 : IN STD_LOGIC_VECTOR (60 downto 0);
        sext_ln44 : IN STD_LOGIC_VECTOR (60 downto 0);
        R_exp : IN STD_LOGIC_VECTOR (63 downto 0);
        integral_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        integral_ce0 : OUT STD_LOGIC;
        integral_we0 : OUT STD_LOGIC;
        integral_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_426_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_426_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_426_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_426_p_ce : OUT STD_LOGIC;
        grp_pow_generic_double_s_fu_390_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_pow_generic_double_s_fu_390_p_din2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_pow_generic_double_s_fu_390_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_pow_generic_double_s_fu_390_p_ce : OUT STD_LOGIC;
        grp_pow_generic_double_s_fu_390_p_start : OUT STD_LOGIC;
        grp_pow_generic_double_s_fu_390_p_ready : IN STD_LOGIC;
        grp_pow_generic_double_s_fu_390_p_done : IN STD_LOGIC;
        grp_pow_generic_double_s_fu_390_p_idle : IN STD_LOGIC );
    end component;


    component loop_uhat_sparse_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln52 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        wide_trip_count : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln52_2 : IN STD_LOGIC_VECTOR (60 downto 0);
        colIndex : IN STD_LOGIC_VECTOR (63 downto 0);
        sext_ln52_4 : IN STD_LOGIC_VECTOR (33 downto 0);
        integral_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        integral_ce0 : OUT STD_LOGIC;
        integral_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        rhs_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        rhs_out_ap_vld : OUT STD_LOGIC;
        grp_fu_420_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_420_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_420_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_420_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_420_p_ce : OUT STD_LOGIC;
        grp_fu_426_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_426_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_426_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_426_p_ce : OUT STD_LOGIC );
    end component;


    component loop_uhat_sparse_pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (63 downto 0);
        exp : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component loop_uhat_sparse_dadddsub_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component loop_uhat_sparse_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component loop_uhat_sparse_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component loop_uhat_sparse_integral_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component loop_uhat_sparse_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rowStart : OUT STD_LOGIC_VECTOR (63 downto 0);
        colIndex : OUT STD_LOGIC_VECTOR (63 downto 0);
        value_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ELEMENTS : OUT STD_LOGIC_VECTOR (31 downto 0);
        tol : OUT STD_LOGIC_VECTOR (63 downto 0);
        L : OUT STD_LOGIC_VECTOR (63 downto 0);
        L_exp : OUT STD_LOGIC_VECTOR (63 downto 0);
        uhat_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        R : OUT STD_LOGIC_VECTOR (63 downto 0);
        R_exp : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component loop_uhat_sparse_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    integral_U : component loop_uhat_sparse_integral_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 17048,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => integral_address0,
        ce0 => integral_ce0,
        we0 => integral_we0,
        d0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_d0,
        q0 => integral_q0);

    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342 : component loop_uhat_sparse_loop_uhat_sparse_Pipeline_loop_uhat_integral
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start,
        ap_done => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_done,
        ap_idle => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_idle,
        ap_ready => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_ready,
        m_axi_gmem_AWVALID => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln40 => trunc_ln_reg_881,
        sext_ln44 => trunc_ln40_1_reg_886,
        R_exp => R_exp_read_reg_832,
        integral_address0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_address0,
        integral_ce0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_ce0,
        integral_we0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_we0,
        integral_d0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_d0,
        grp_fu_426_p_din0 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_din0,
        grp_fu_426_p_din1 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_din1,
        grp_fu_426_p_dout0 => grp_fu_426_p2,
        grp_fu_426_p_ce => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_ce,
        grp_pow_generic_double_s_fu_390_p_din1 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_din1,
        grp_pow_generic_double_s_fu_390_p_din2 => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_din2,
        grp_pow_generic_double_s_fu_390_p_dout0 => grp_pow_generic_double_s_fu_390_ap_return,
        grp_pow_generic_double_s_fu_390_p_ce => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_ce,
        grp_pow_generic_double_s_fu_390_p_start => grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_start,
        grp_pow_generic_double_s_fu_390_p_ready => grp_pow_generic_double_s_fu_390_ap_ready,
        grp_pow_generic_double_s_fu_390_p_done => grp_pow_generic_double_s_fu_390_ap_done,
        grp_pow_generic_double_s_fu_390_p_idle => grp_pow_generic_double_s_fu_390_ap_idle);

    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376 : component loop_uhat_sparse_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start,
        ap_done => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_done,
        ap_idle => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_idle,
        ap_ready => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_ready,
        sext_ln52 => e_reg_996,
        m_axi_gmem_AWVALID => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        wide_trip_count => e_max_1_reg_332,
        sext_ln52_2 => trunc_ln52_3_reg_1003,
        colIndex => colIndex_read_reg_864,
        sext_ln52_4 => shl_ln52_3_reg_1008,
        integral_address0 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_integral_address0,
        integral_ce0 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_integral_ce0,
        integral_q0 => integral_q0,
        rhs_out => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_rhs_out,
        rhs_out_ap_vld => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_rhs_out_ap_vld,
        grp_fu_420_p_din0 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_din0,
        grp_fu_420_p_din1 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_din1,
        grp_fu_420_p_opcode => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_opcode,
        grp_fu_420_p_dout0 => grp_fu_420_p2,
        grp_fu_420_p_ce => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_ce,
        grp_fu_426_p_din0 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_din0,
        grp_fu_426_p_din1 => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_din1,
        grp_fu_426_p_dout0 => grp_fu_426_p2,
        grp_fu_426_p_ce => grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_ce);

    grp_pow_generic_double_s_fu_390 : component loop_uhat_sparse_pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pow_generic_double_s_fu_390_ap_start,
        ap_done => grp_pow_generic_double_s_fu_390_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_390_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_390_ap_ready,
        ap_ce => grp_pow_generic_double_s_fu_390_ap_ce,
        base_r => grp_pow_generic_double_s_fu_390_base_r,
        exp => grp_pow_generic_double_s_fu_390_exp,
        ap_return => grp_pow_generic_double_s_fu_390_ap_return);

    control_s_axi_U : component loop_uhat_sparse_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rowStart => rowStart,
        colIndex => colIndex,
        value_r => value_r,
        ELEMENTS => ELEMENTS,
        tol => tol,
        L => L,
        L_exp => L_exp,
        uhat_i => uhat_i,
        R => R,
        R_exp => R_exp,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component loop_uhat_sparse_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 64,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_4_reg_1019,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    dadddsub_64ns_64ns_64_7_full_dsp_1_U63 : component loop_uhat_sparse_dadddsub_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_420_p0,
        din1 => grp_fu_420_p1,
        opcode => grp_fu_420_opcode,
        ce => grp_fu_420_ce,
        dout => grp_fu_420_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U64 : component loop_uhat_sparse_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_426_p0,
        din1 => grp_fu_426_p1,
        ce => grp_fu_426_ce,
        dout => grp_fu_426_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U65 : component loop_uhat_sparse_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => error_1_fu_178,
        din1 => tol_read_reg_847,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_430_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_ready = ap_const_logic_1)) then 
                    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_ready = ap_const_logic_1)) then 
                    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_390_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pow_generic_double_s_fu_390_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state37) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    grp_pow_generic_double_s_fu_390_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_390_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_390_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    e_max_1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln44_fu_567_p2 = ap_const_lv1_0))) then 
                e_max_1_reg_332 <= ELEMENTS_read_reg_854;
            elsif (((icmp_ln47_reg_935 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                e_max_1_reg_332 <= e_max_fu_657_p1;
            end if; 
        end if;
    end process;

    error_1_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                error_1_fu_178 <= reg_434;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln44_fu_567_p2 = ap_const_lv1_1))) then 
                error_1_fu_178 <= error_2_reg_320;
            end if; 
        end if;
    end process;

    error_2_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                error_2_reg_320 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
                error_2_reg_320 <= grp_fu_420_p2;
            end if; 
        end if;
    end process;

    i_1_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_1_reg_308 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
                i_1_reg_308 <= add_ln44_reg_925;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ELEMENTS_read_reg_854 <= ELEMENTS;
                L_exp_read_reg_842 <= L_exp;
                R_exp_read_reg_832 <= R_exp;
                colIndex_read_reg_864 <= colIndex;
                rowStart_read_reg_869 <= rowStart;
                tol_read_reg_847 <= tol;
                trunc_ln40_1_reg_886 <= uhat_i(63 downto 3);
                trunc_ln5_reg_891 <= L(63 downto 3);
                trunc_ln_reg_881 <= R(63 downto 3);
                uhat_i_read_reg_837 <= uhat_i;
                value_r_read_reg_859 <= value_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln44_reg_925 <= add_ln44_fu_573_p2;
                icmp_ln47_reg_935 <= icmp_ln47_fu_583_p2;
                trunc_ln48_1_reg_939 <= add_ln48_1_fu_607_p2(63 downto 3);
                trunc_ln48_reg_944 <= trunc_ln48_fu_622_p1;
                    zext_ln44_reg_930(14 downto 0) <= zext_ln44_fu_579_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln55_reg_975 <= add_ln55_fu_692_p2;
                trunc_ln52_1_reg_965 <= add_ln52_fu_673_p2(63 downto 3);
                trunc_ln52_reg_970 <= trunc_ln52_fu_688_p1;
                trunc_ln7_reg_980 <= add_ln56_fu_708_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                e_reg_996 <= e_fu_749_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                gmem_addr_2_read_reg_955 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state124)) then
                gmem_addr_3_read_reg_1026 <= gmem_RDATA;
                tmp_s_reg_1031 <= grp_pow_generic_double_s_fu_390_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state130)) then
                gmem_addr_4_read_reg_1041 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state122)) then
                gmem_addr_4_reg_1019 <= sext_ln56_fu_802_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                gmem_addr_read_reg_991 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln36_1_reg_914 <= icmp_ln36_1_fu_546_p2;
                icmp_ln36_reg_909 <= icmp_ln36_fu_540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                or_ln36_1_reg_901 <= or_ln36_1_fu_507_p2;
                sext_ln36_reg_896 <= sext_ln36_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_434 <= grp_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state131))) then
                reg_440 <= grp_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                    shl_ln52_3_reg_1008(33 downto 2) <= shl_ln52_3_fu_780_p3(33 downto 2);
                trunc_ln52_3_reg_1003 <= add_ln52_1_fu_764_p2(63 downto 3);
            end if;
        end if;
    end process;
    zext_ln44_reg_930(61 downto 15) <= "00000000000000000000000000000000000000000000000";
    shl_ln52_3_reg_1008(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state33, ap_CS_fsm_state116, ap_CS_fsm_state124, ap_CS_fsm_state122, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state137, ap_CS_fsm_state14, icmp_ln47_fu_583_p2, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_done, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_done, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state36, icmp_ln44_fu_567_p2, and_ln36_1_fu_561_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = and_ln36_1_fu_561_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln44_fu_567_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln47_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln44_fu_567_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state122))) then
                    ap_NS_fsm <= ap_ST_fsm_state123;
                else
                    ap_NS_fsm <= ap_ST_fsm_state122;
                end if;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then
                    ap_NS_fsm <= ap_ST_fsm_state125;
                else
                    ap_NS_fsm <= ap_ST_fsm_state124;
                end if;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then
                    ap_NS_fsm <= ap_ST_fsm_state131;
                else
                    ap_NS_fsm <= ap_ST_fsm_state130;
                end if;
            when ap_ST_fsm_state131 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then
                    ap_NS_fsm <= ap_ST_fsm_state132;
                else
                    ap_NS_fsm <= ap_ST_fsm_state131;
                end if;
            when ap_ST_fsm_state132 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                    ap_NS_fsm <= ap_ST_fsm_state133;
                else
                    ap_NS_fsm <= ap_ST_fsm_state132;
                end if;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state137))) then
                    ap_NS_fsm <= ap_ST_fsm_state138;
                else
                    ap_NS_fsm <= ap_ST_fsm_state137;
                end if;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln44_fu_573_p2 <= std_logic_vector(unsigned(i_1_reg_308) + unsigned(ap_const_lv15_1));
    add_ln48_1_fu_607_p2 <= std_logic_vector(unsigned(zext_ln48_fu_603_p1) + unsigned(rowStart_read_reg_869));
    add_ln48_fu_597_p2 <= std_logic_vector(unsigned(shl_ln_fu_589_p3) + unsigned(ap_const_lv17_4));
    add_ln52_1_fu_764_p2 <= std_logic_vector(signed(sext_ln52_1_fu_760_p1) + signed(value_r_read_reg_859));
    add_ln52_fu_673_p2 <= std_logic_vector(unsigned(zext_ln52_fu_669_p1) + unsigned(rowStart_read_reg_869));
    add_ln55_fu_692_p2 <= std_logic_vector(unsigned(zext_ln44_reg_930) + unsigned(sext_ln36_reg_896));
    add_ln56_fu_708_p2 <= std_logic_vector(unsigned(zext_ln56_fu_704_p1) + unsigned(uhat_i_read_reg_837));
    and_ln36_1_fu_561_p2 <= (grp_fu_430_p2 and and_ln36_fu_556_p2);
    and_ln36_fu_556_p2 <= (or_ln36_fu_552_p2 and or_ln36_1_reg_901);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state149 <= ap_CS_fsm(148);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state150 <= ap_CS_fsm(149);
    ap_CS_fsm_state151 <= ap_CS_fsm(150);
    ap_CS_fsm_state152 <= ap_CS_fsm(151);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state37 <= ap_NS_fsm(36);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;

    ap_ST_fsm_state116_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state116_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state116_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;

    ap_ST_fsm_state122_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state122_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state122_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state123_blk <= ap_const_logic_0;

    ap_ST_fsm_state124_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state124_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state124_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state130_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state130_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state130_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state131_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state131_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state131_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state132_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state132_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state132_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;

    ap_ST_fsm_state137_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state137_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state137_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_done)
    begin
        if ((grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state150_blk <= ap_const_logic_0;
    ap_ST_fsm_state151_blk <= ap_const_logic_0;
    ap_ST_fsm_state152_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;

    ap_ST_fsm_state33_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;

    ap_ST_fsm_state36_blk_assign_proc : process(grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_done)
    begin
        if ((grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state11, and_ln36_1_fu_561_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = and_ln36_1_fu_561_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, and_ln36_1_fu_561_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = and_ln36_1_fu_561_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln36_1_fu_478_p1 <= tol_read_reg_847;
    bitcast_ln36_fu_522_p1 <= error_1_fu_178;
    bitcast_ln55_fu_812_p1 <= gmem_addr_3_read_reg_1026;
    bitcast_ln56_fu_816_p1 <= gmem_addr_4_read_reg_1041;
    e_fu_749_p1 <= lshr_ln52_fu_744_p2(32 - 1 downto 0);
    e_max_fu_657_p1 <= lshr_ln48_fu_652_p2(32 - 1 downto 0);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state116, ap_CS_fsm_state122, ap_CS_fsm_state35, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARADDR, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state36, sext_ln48_fu_631_p1, sext_ln52_fu_723_p1, sext_ln55_fu_792_p1, sext_ln56_fu_802_p1)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state122))) then 
            gmem_ARADDR <= sext_ln56_fu_802_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            gmem_ARADDR <= sext_ln55_fu_792_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            gmem_ARADDR <= sext_ln52_fu_723_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_ARADDR <= sext_ln48_fu_631_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            gmem_ARADDR <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_ARADDR <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state116, ap_CS_fsm_state122, ap_CS_fsm_state35, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARLEN, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state36)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state122)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            gmem_ARLEN <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_ARLEN <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state116, ap_CS_fsm_state122, ap_CS_fsm_state35, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARVALID, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state36)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state122)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            gmem_ARVALID <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_ARVALID <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state131, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state137, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state137))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state124, ap_CS_fsm_state130, ap_CS_fsm_state35, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_RREADY, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_RREADY, gmem_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state36)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state130)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            gmem_RREADY <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_m_axi_gmem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_RREADY <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_WDATA <= reg_440;

    gmem_WVALID_assign_proc : process(ap_CS_fsm_state132, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state116, ap_CS_fsm_state122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state137)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state124, ap_CS_fsm_state130)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_420_ce_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state137, ap_CS_fsm_state8, ap_CS_fsm_state138, ap_CS_fsm_state152, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_ce, gmem_WREADY, gmem_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state36, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state146, ap_CS_fsm_state147, ap_CS_fsm_state148, ap_CS_fsm_state149, ap_CS_fsm_state150, ap_CS_fsm_state151)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_420_ce <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state132)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state137)))) then 
            grp_fu_420_ce <= ap_const_logic_1;
        else 
            grp_fu_420_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_420_opcode_assign_proc : process(ap_CS_fsm_state132, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_opcode, ap_CS_fsm_state2, ap_CS_fsm_state36, ap_CS_fsm_state146)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_420_opcode <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_opcode),2));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            grp_fu_420_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_420_opcode <= ap_const_lv2_0;
        else 
            grp_fu_420_opcode <= "XX";
        end if; 
    end process;


    grp_fu_420_p0_assign_proc : process(ap_CS_fsm_state132, tol_read_reg_847, bitcast_ln56_fu_816_p1, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state36, ap_CS_fsm_state146, error_2_reg_320)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_420_p0 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            grp_fu_420_p0 <= error_2_reg_320;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            grp_fu_420_p0 <= bitcast_ln56_fu_816_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_420_p0 <= tol_read_reg_847;
        else 
            grp_fu_420_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_420_p1_assign_proc : process(ap_CS_fsm_state132, reg_440, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state36, ap_CS_fsm_state146)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_420_p1 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_420_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state146))) then 
            grp_fu_420_p1 <= reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_420_p1 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_420_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_426_ce_assign_proc : process(ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state145, ap_CS_fsm_state125, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_ce, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_ce, gmem_AWREADY, gmem_RVALID, ap_CS_fsm_state13, ap_CS_fsm_state36, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141, ap_CS_fsm_state142, ap_CS_fsm_state143, ap_CS_fsm_state144)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_426_ce <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_426_ce <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state142) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state131)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state130)))) then 
            grp_fu_426_ce <= ap_const_logic_1;
        else 
            grp_fu_426_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_426_p0_assign_proc : process(reg_434, bitcast_ln55_fu_812_p1, ap_CS_fsm_state125, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_din0, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_din0, ap_CS_fsm_state13, ap_CS_fsm_state36, ap_CS_fsm_state139)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_426_p0 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_426_p0 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
            grp_fu_426_p0 <= reg_434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            grp_fu_426_p0 <= bitcast_ln55_fu_812_p1;
        else 
            grp_fu_426_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_426_p1_assign_proc : process(reg_434, tmp_s_reg_1031, ap_CS_fsm_state125, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_din1, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_din1, ap_CS_fsm_state13, ap_CS_fsm_state36, ap_CS_fsm_state139)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_426_p1 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_grp_fu_426_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_426_p1 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_fu_426_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
            grp_fu_426_p1 <= reg_434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            grp_fu_426_p1 <= tmp_s_reg_1031;
        else 
            grp_fu_426_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_ap_start_reg;
    grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_ap_start_reg;

    grp_pow_generic_double_s_fu_390_ap_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state33, ap_CS_fsm_state116, ap_CS_fsm_state124, ap_CS_fsm_state122, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state137, ap_CS_fsm_state8, ap_CS_fsm_state138, ap_CS_fsm_state145, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state125, ap_CS_fsm_state152, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_ce, gmem_ARREADY, gmem_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141, ap_CS_fsm_state142, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state146, ap_CS_fsm_state147, ap_CS_fsm_state148, ap_CS_fsm_state149, ap_CS_fsm_state150, ap_CS_fsm_state151)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_pow_generic_double_s_fu_390_ap_ce <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 
    = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state142) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = 
    ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state124)) or ((gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state122)) or ((gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state116)))) then 
            grp_pow_generic_double_s_fu_390_ap_ce <= ap_const_logic_0;
        else 
            grp_pow_generic_double_s_fu_390_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_pow_generic_double_s_fu_390_ap_start_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_start, ap_CS_fsm_state13, grp_pow_generic_double_s_fu_390_ap_start_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_pow_generic_double_s_fu_390_ap_start <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_start;
        else 
            grp_pow_generic_double_s_fu_390_ap_start <= grp_pow_generic_double_s_fu_390_ap_start_reg;
        end if; 
    end process;


    grp_pow_generic_double_s_fu_390_base_r_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_din1, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_rhs_out, ap_CS_fsm_state37, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_pow_generic_double_s_fu_390_base_r <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_pow_generic_double_s_fu_390_base_r <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_rhs_out;
        else 
            grp_pow_generic_double_s_fu_390_base_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pow_generic_double_s_fu_390_exp_assign_proc : process(L_exp_read_reg_842, grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_din2, ap_CS_fsm_state37, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_pow_generic_double_s_fu_390_exp <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_grp_pow_generic_double_s_fu_390_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_pow_generic_double_s_fu_390_exp <= L_exp_read_reg_842;
        else 
            grp_pow_generic_double_s_fu_390_exp <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln36_1_fu_546_p2 <= "1" when (trunc_ln36_1_fu_536_p1 = ap_const_lv52_0) else "0";
    icmp_ln36_2_fu_495_p2 <= "0" when (tmp_4_fu_481_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln36_3_fu_501_p2 <= "1" when (trunc_ln36_fu_491_p1 = ap_const_lv52_0) else "0";
    icmp_ln36_fu_540_p2 <= "0" when (tmp_3_fu_526_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln44_fu_567_p2 <= "1" when (i_1_reg_308 = ap_const_lv15_4298) else "0";
    icmp_ln47_fu_583_p2 <= "1" when (unsigned(i_1_reg_308) < unsigned(ap_const_lv15_4297)) else "0";

    integral_address0_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_address0, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_integral_address0, ap_CS_fsm_state13, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            integral_address0 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_integral_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            integral_address0 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_address0;
        else 
            integral_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_ce0_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_ce0, grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_integral_ce0, ap_CS_fsm_state13, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            integral_ce0 <= grp_loop_uhat_sparse_Pipeline_VITIS_LOOP_52_1_fu_376_integral_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            integral_ce0 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_ce0;
        else 
            integral_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    integral_we0_assign_proc : process(grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            integral_we0 <= grp_loop_uhat_sparse_Pipeline_loop_uhat_integral_fu_342_integral_we0;
        else 
            integral_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln48_fu_652_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_2_read_reg_955),to_integer(unsigned('0' & zext_ln48_1_fu_648_p1(31-1 downto 0)))));
    lshr_ln52_fu_744_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_read_reg_991),to_integer(unsigned('0' & zext_ln52_1_fu_740_p1(31-1 downto 0)))));
    or_ln36_1_fu_507_p2 <= (icmp_ln36_3_fu_501_p2 or icmp_ln36_2_fu_495_p2);
    or_ln36_fu_552_p2 <= (icmp_ln36_reg_909 or icmp_ln36_1_reg_914);
        sext_ln36_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_reg_891),62));

        sext_ln48_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln48_1_reg_939),64));

        sext_ln52_1_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln52_2_fu_753_p3),64));

        sext_ln52_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln52_1_reg_965),64));

        sext_ln55_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln55_reg_975),64));

        sext_ln56_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_reg_980),64));

    shl_ln48_1_fu_641_p3 <= (trunc_ln48_reg_944 & ap_const_lv3_0);
    shl_ln52_1_fu_733_p3 <= (trunc_ln52_reg_970 & ap_const_lv3_0);
    shl_ln52_2_fu_753_p3 <= (e_reg_996 & ap_const_lv3_0);
    shl_ln52_3_fu_780_p3 <= (e_reg_996 & ap_const_lv2_0);
    shl_ln5_fu_661_p3 <= (i_1_reg_308 & ap_const_lv2_0);
    shl_ln7_fu_696_p3 <= (i_1_reg_308 & ap_const_lv3_0);
    shl_ln_fu_589_p3 <= (i_1_reg_308 & ap_const_lv2_0);
    tmp_3_fu_526_p4 <= bitcast_ln36_fu_522_p1(62 downto 52);
    tmp_4_fu_481_p4 <= bitcast_ln36_1_fu_478_p1(62 downto 52);
    trunc_ln36_1_fu_536_p1 <= bitcast_ln36_fu_522_p1(52 - 1 downto 0);
    trunc_ln36_fu_491_p1 <= bitcast_ln36_1_fu_478_p1(52 - 1 downto 0);
    trunc_ln48_fu_622_p1 <= add_ln48_1_fu_607_p2(3 - 1 downto 0);
    trunc_ln52_fu_688_p1 <= add_ln52_fu_673_p2(3 - 1 downto 0);
    zext_ln44_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_308),62));
    zext_ln48_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln48_1_fu_641_p3),64));
    zext_ln48_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_fu_597_p2),64));
    zext_ln52_1_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln52_1_fu_733_p3),64));
    zext_ln52_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_661_p3),64));
    zext_ln56_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_fu_696_p3),64));
end behav;
